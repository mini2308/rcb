Producer Consumer
Code:
#include <pthread.h>
#include <stdlib.h>
#include <semaphore.h>
#include <stdio.h>
#define MaxItems 5
#define BufferSize 5
sem_t empty;
sem_t full;
int in= 0;
int out = 0;
int buffer[BufferSize];
 pthread_mutex_t mutex;
void producer(void *pno)
{
int item;
for(int i=0; i<MaxItems; i++) { item= rand(); // Produce an random item
sem_wait(&empty);
pthread_mutex_lock(&mutex);
buffer[in]-item;
printf("Producer %d: Insert Item %d at %d\n", *((int*)pno), buffer[in],in);
in = (in+1)%BufferSize;
pthread_mutex_unlock(&mutex);
sem_post(&full);
}
}
void consumer(void *cno)
{
for(int i=0; i<MaxItems; i++) {
    sem_wait(&full);
    pthread_mutex_lock(&mutex);
    int item = buffer[out];
    printf("Consumer %d: Remove Item %d from %d\n",*((int *)cno),item, out);
    out= (out+1)%BufferSize;
    pthread_mutex_unlock(&mutex);
    sem_post(&empty);
}
}
int main()
{
pthread_t pro[5],con[5];
pthread_mutex_init(&mutex, NULL);
sem_init(&empty,0,BufferSize);
sem_init(&full,0,0);
int a[5]= {1,2,3,4,5}; //Just used for numbering the producer and consumer

for(int i=0; i<5; i++) {
    pthread_create(&pro[i], NULL, (void *)producer, (void *)&a[i]);
}
for(int i=0; i<5; i++) {
    pthread_create(&con[i], NULL, (void *)consumer, (void *)&a[i]);
}
for(int i=0; i<5; i++) {
    pthread_join(pro[i], NULL);
}
for(int i=0; i<5; i++) {
    pthread_join(con[i], NULL);
}
pthread_mutex_destroy(&mutex);
sem_destroy(&empty);
sem_destroy(&full);
return 0;
}

Dining Philosophers
Code:
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
sem_t room;
sem_t chopstick[5];
void * philosopher(void *);
void eat(int);
int main()
{
    int i,a[5];
    pthread_t tid[5];
    sem_init(&room,0,4);
    for(i=0;i<5;i++)
   	 sem_init(&chopstick[i],0,1);
    for(i=0;i<5;i++){
   	 a[i]=i;
   	 pthread_create(&tid[i],NULL,philosopher,(void *)&a[i]);
    }
    for(i=0;i<5;i++)
   	 pthread_join(tid[i],NULL);
}
void * philosopher(void * num)
{
    int phil=*(int *)num;
    sem_wait(&room);
    printf("\nPhilosopher %d has entered room",phil);
    sem_wait(&chopstick[phil]);
    sem_wait(&chopstick[(phil+1)%5]);
    eat(phil);
    sleep(2);
    printf("\nPhilosopher %d has finished eating",phil);

    sem_post(&chopstick[(phil+1)%5]);
    sem_post(&chopstick[phil]);
    sem_post(&room);
}
void eat(int phil)
{
    printf("\nPhilosopher %d is eating",phil);
}


